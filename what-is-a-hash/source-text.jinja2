{{ _('What is a hash?') }}

{{ _('bitcoindesigned.com') }}

{{ _('The hash function') }}

{{ _('A hash function is a math algorithm that turns an arbitrarily-large amount of data into a fixed-length representation.') }}

{{ _('HASH FUNCTION') }}

{{ _('Hashes are usually written in a hexadecimal notation.') }}

{{ _('Decimal:') }}

{{ _('to hexadecimal') }}

{{ _('The input data  to a hash function is often called the message.') }}

{{ _('message') }}

{{ _('digest') }}

{{ _('And the output is often called digest or simply hash.') }}

{{ _('What about a cryptographic hash?') }}

{{ _('A cryptographic hash function is a special class of hash function with useful properties for cryptography.') }}

{{ _('Besides the usual hash features, here are some extra properties of an ideal cryptographic hash function:') }}

{{ _('Efficient') }}

{{ _('It is quick to compute the hash for any given message.') }}

{{ _('Trap-door') }}

{{ _('It is infeasible to calculate a message from its hash.') }}

{{ _('No collision') }}

{{ _('It is infeasible to find two different messages with the same hash.') }}

{{ _('“Unbreakable”') }}

{{ _('It is resistant to all known crytoanalytics attacks.') }}

{{ _('Some of the applications') }}

{{ _('Verifying the integrity of files or messages') }}

{{ _('If you calculate the hash of a message in the moment of its creation and anytime after, you’ll be able to verify the content integrity. If one byte has been altered, the two hashes will be completely different.') }}

{{ _('Original message:') }}

{{ _('hash') }}

{{ _('Original digest:') }}

{{ _('Message digest') }}

{{ _('Messages that claims to be the original:') }}

{{ _('Message 1') }}

{{ _('hash') }}

{{ _('Message digest') }}

{{ _('compare with original') }}

{{ _('Message 2') }}

{{ _('hash') }}

{{ _('Message digest') }}

{{ _('compare with original') }}

{{ _('Message 1 is false. Message 2 is true.') }}

{{ _('Password verification') }}

{{ _('Storing plain passwords in databases is extremely insecure. If you store the hashes of passwords, you can still authenticate the correct inputs, but if the database is compromised, the passwords will not be directly available for an attacker.') }}

{{ _('User registered password:') }}

{{ _('hash') }}

{{ _('password digest') }}

{{ _('Stored in') }}

{{ _('Database') }}

{{ _('User login attempts:') }}

{{ _('Correct password') }}

{{ _('hash') }}

{{ _('password digest') }}

{{ _('Search for matches') }}

{{ _('Wrong password') }}

{{ _('hash') }}

{{ _('password digest') }}

{{ _('Search for matches') }}

{{ _('User authenticated') }}

{{ _('User not authenticated') }}

{{ _('In real life, other methods should be applied to improve  database security. This is just an illustration.') }}

{{ _('Proof-of-Work (PoW)') }}

{{ _('The generation of a cryptographic hash can be predictably costly, while the verification of the result is easier. With PoW, we want to verify if a participant spent an estimated amount of computational resource to perform an operation.') }}

{{ _('System difficulty') }}

{{ _('defines') }}

{{ _('Target value') }}

{{ _('Hash generated by participant') }}

{{ _('compares') }}

{{ _('Is the generated hash smaller than the target?') }}

{{ _('NO') }}

{{ _('Participant didn’t spend the expected amount of resources.') }}

{{ _('YES') }}

{{ _('Participant spent the expected amount of resources.') }}

{{ _('Bitcoin hash functions') }}

{{ _('Bitcoin uses two different cryptographic hash  functions in its inner workings:') }}

{{ _('SHA-256') }}

{{ _('Results in a 256-bit number. It means it’s a really big number and it looks like this (just an example from a file in my computer):') }}

{{ _('Used in mining as the Proof-of-Work algorithm and in the creation of bitcoin addresses.') }}

{{ _('RIPEMD-160') }}

{{ _('Results in a 160-bit number. It’s still large, but smaller than the SHA-256. Here’s an example of how it looks:') }}

{{ _('Used in the creation of bitcoin addresses.') }}

{{ _('Some special paranoia...') }}

{{ _('In Bitcoin, everytime you use one of these functions you double it with an extra round of SHA-256; it’s a security reinforcement. This means that when you hear:') }}

{{ _('“Uses SHA-256 on X.”') }}

{{ _('It actually means:') }}

{{ _('Uses SHA-256 on X and uses SHA-256 again on the first result. Or, simply:') }}

{{ _('SHA-256 ( SHA-256 (X) )') }}

{{ _('“Uses RIPEMD-160 on X.”') }}

{{ _('It actually means:') }}

{{ _('First uses SHA-256 on X and then uses RIPEMD-160 on the first result. Or, simply:') }}

{{ _('RIPEMD-160 ( SHA-256 (X) )') }}

{{ _('Author: Patrícia Estevão') }}

{{ _('Editor: Marco Agner') }}

{{ _('Main sources: https://en.bitcoin.it/wiki/Hash') }}

{{ _('https://en.wikipedia.org/wiki/Cryptographic_hash') }}

{{ _('https://en.bitcoin.it/wiki/SHA-256') }}

